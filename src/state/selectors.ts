import { StoreType } from './redux'

// this function injects rollout versions to records based on the rollouts
// {a: asd} -> {a: asd, _site: 1.0.0, @dcl/unity-renderer: 6.0.0}
export function injectVersions<T extends Record<string, any>>(versions: T): T {
  var rolloutsInfo = (globalThis as any).ROLLOUTS || {}

  for (let component in rolloutsInfo) {
    if (component === '_site' || component.startsWith('@dcl')) {
      if (rolloutsInfo[component] && rolloutsInfo[component].version) {
        versions[component as keyof T] = rolloutsInfo[component].version
      }
    }
  }

  return versions
}

/**
 * This type should never change, things _may_ be added to it but definitely not
 * change, otherwise it will break the DWH reports and generate lots of otherwise
 * avoidable work
 */
type SegmentIdentificationForDecentraland = {
  // unique ID for each session. It is generated by the browser each time it starts
  sessionId: string
  // commit hash that created this _explorer-website_ build
  explorer_commit_hash: string
  // internal decentraland opaque id to calculate and derive feature flags for the session
  dcl_feature_flags: string
}

// This function is used for every rollbar and segment events. It adds information about the current
// session including versions and an opaque sessionId
export function getAnalyticsContext(state: StoreType): SegmentIdentificationForDecentraland {
  return injectVersions({
    sessionId: state.session.sessionId,
    dcl_feature_flags: (globalThis as any).DCL_FEATURE_FLAGS_HASH,
    explorer_commit_hash: (globalThis as any).REACT_APP_WEBSITE_VERSION
  })
}
